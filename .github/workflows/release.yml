name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from VERSION file
        id: version
        run: |
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION | tr -d '\n' | tr -d ' ')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "Current version: $VERSION"
          else
            echo "VERSION file not found"
            exit 1
          fi

      - name: Check if release documentation exists
        id: check_docs
        run: |
          RELEASE_DOC="docs/releases/v${{ steps.version.outputs.version }}.md"
          if [ -f "$RELEASE_DOC" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release documentation found: $RELEASE_DOC"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release documentation not found: $RELEASE_DOC"
          fi

      - name: Check if release already exists
        id: check_release
        if: steps.check_docs.outputs.exists == 'true'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG already exists, skipping..."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG does not exist, proceeding..."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate script and environment
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          echo "üîç Validating script and environment..."
          
          # Validate script syntax
          if bash -n ProPresenter-Setup-Assistant.command; then
            echo "‚úÖ Script syntax validation passed"
          else
            echo "‚ùå Script syntax validation failed"
            exit 1
          fi
          
          # Check script permissions
          if [[ -x "ProPresenter-Setup-Assistant.command" ]]; then
            echo "‚úÖ Script has executable permissions"
          else
            echo "‚ùå Script missing executable permissions"
            exit 1
          fi
          
          # Verify environment configuration
          if [[ -f "docs/app-design/environment.md" ]]; then
            echo "‚úÖ Environment configuration file exists"
            # Test key configuration values
            if grep -q "Tenant ID" docs/app-design/environment.md && \
               grep -q "Tenant Domain" docs/app-design/environment.md && \
               grep -q "SharePoint Base URL" docs/app-design/environment.md; then
              echo "‚úÖ Required environment configuration found"
            else
              echo "‚ùå Missing required environment configuration"
              exit 1
            fi
          else
            echo "‚ùå Environment configuration file not found"
            exit 1
          fi

      - name: Extract release notes
        id: extract_notes
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          RELEASE_DOC="docs/releases/v${{ steps.version.outputs.version }}.md"
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"

          # Get current date in YYYY-MM-DD format
          CURRENT_DATE=$(date +%Y-%m-%d)

          # Find previous tag for compare link
          PREVIOUS_TAG=$(git tag --sort=version:refname | grep -v "^$TAG$" | tail -1)
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag found, use first commit
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            COMPARE_LINK="https://github.com/mosaikberlin/propresenter-setup-assistant/commits/$TAG"
          else
            COMPARE_LINK="https://github.com/mosaikberlin/propresenter-setup-assistant/compare/$PREVIOUS_TAG...$TAG"
          fi

          # Extract Major Changes section
          MAJOR_CHANGES=$(awk '
            /^## Major Changes/ { found=1; next }
            /^## / && found { exit }
            found && NF { print }
          ' "$RELEASE_DOC" | sed '/^$/d')

          # Extract Fixes section
          FIXES=$(awk '
            /^## Fixes/ { found=1; next }
            /^## / && found { exit }
            found && NF { print }
          ' "$RELEASE_DOC" | sed '/^$/d')

          # Create release notes with new format
          RELEASE_NOTES="## [$VERSION]($COMPARE_LINK) ($CURRENT_DATE)"

          if [ -n "$MAJOR_CHANGES" ]; then
            RELEASE_NOTES="$RELEASE_NOTES"$'\n\n'"### Major Changes"$'\n\n'"$MAJOR_CHANGES"
          fi

          if [ -n "$FIXES" ]; then
            RELEASE_NOTES="$RELEASE_NOTES"$'\n\n'"### Fixes"$'\n\n'"$FIXES"
          fi

          if [ -z "$MAJOR_CHANGES" ] && [ -z "$FIXES" ]; then
            echo "No Major Changes or Fixes sections found in release documentation"
            exit 1
          fi

          # Save to file for multiline output
          echo "$RELEASE_NOTES" > release_notes.txt
          echo "Release notes extracted successfully"
          echo "Compare link: $COMPARE_LINK"

      - name: Create release package
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          echo "üì¶ Creating release package..."
          
          # Create a clean directory for packaging
          mkdir -p release-package
          
          # Copy main script
          cp ProPresenter-Setup-Assistant.command release-package/
          
          # Copy supporting directories if they exist
          if [ -d "lib" ] && [ "$(ls -A lib)" ]; then
            cp -r lib/ release-package/lib/
          else
            echo "‚ÑπÔ∏è lib/ directory is empty or doesn't exist, skipping"
          fi
          
          if [ -d "docs" ]; then
            cp -r docs/ release-package/docs/
          fi
          
          # Copy VERSION file
          cp VERSION release-package/
          
          # Copy essential files if they exist
          [ -f "LICENSE" ] && cp LICENSE release-package/
          [ -f "README.md" ] && cp README.md release-package/
          
          # Create ZIP package
          cd release-package
          zip -r "../propresenter-setup-assistant-v${{ steps.version.outputs.version }}.zip" .
          cd ..
          
          # Verify package contents
          echo "üìã Package contents:"
          unzip -l "propresenter-setup-assistant-v${{ steps.version.outputs.version }}.zip"
          
          # Verify package size
          PACKAGE_SIZE=$(stat -c%s "propresenter-setup-assistant-v${{ steps.version.outputs.version }}.zip" 2>/dev/null || stat -f%z "propresenter-setup-assistant-v${{ steps.version.outputs.version }}.zip")
          echo "üìè Package size: ${PACKAGE_SIZE} bytes"

      - name: Test package extraction
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          echo "üß™ Testing package extraction..."
          
          # Create test directory
          mkdir -p test-extraction
          cd test-extraction
          
          # Extract package
          unzip "../propresenter-setup-assistant-v${{ steps.version.outputs.version }}.zip"
          
          # Test script execution (syntax only)
          if bash -n ProPresenter-Setup-Assistant.command; then
            echo "‚úÖ Extracted script syntax validation passed"
          else
            echo "‚ùå Extracted script syntax validation failed"
            exit 1
          fi
          
          # Verify permissions
          if [[ -x "ProPresenter-Setup-Assistant.command" ]]; then
            echo "‚úÖ Extracted script has executable permissions"
          else
            echo "‚ùå Extracted script missing executable permissions"
            exit 1
          fi
          
          # Verify VERSION file works
          if [[ -f "VERSION" ]]; then
            VERSION_CONTENT=$(cat VERSION)
            echo "‚úÖ VERSION file extracted: $VERSION_CONTENT"
          else
            echo "‚ùå VERSION file missing from package"
            exit 1
          fi
          
          cd ..

      - name: Create git tag
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists locally"
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Created and pushed tag: $TAG"
          fi

      - name: Create GitHub Release
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'false'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          gh release create "$TAG" \
            --title "ProPresenter Setup Assistant $TAG" \
            --notes-file release_notes.txt \
            "propresenter-setup-assistant-v${{ steps.version.outputs.version }}.zip#ProPresenter Setup Assistant v${{ steps.version.outputs.version }}"
          echo "‚úÖ Created GitHub release: $TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip release (no documentation)
        if: steps.check_docs.outputs.exists == 'false'
        run: |
          echo "‚ÑπÔ∏è Skipping release creation - no release documentation found for version ${{ steps.version.outputs.version }}"

      - name: Skip release (already exists)
        if: steps.check_docs.outputs.exists == 'true' && steps.check_release.outputs.exists == 'true'
        run: |
          echo "‚ÑπÔ∏è Skipping release creation - release ${{ steps.version.outputs.tag }} already exists"